// Date: 8/6/2014 12:40:17 PM
// Template version 1.1
// Java generated by Techne
// Keep in mind that you still need to fill in some blanks
// - ZeuX

package tamaized.voidscape.client.entity.model;

import com.google.common.collect.ImmutableList;
import net.minecraft.client.renderer.entity.model.SegmentedModel;
import net.minecraft.client.renderer.model.ModelRenderer;
import net.minecraft.util.math.MathHelper;
import tamaized.voidscape.entity.EntityCorruptedPawn;

public class ModelCorruptedPawn<T extends EntityCorruptedPawn> extends SegmentedModel<T> {

	private final ImmutableList<ModelRenderer> parts;

	private ModelRenderer head;
	private ModelRenderer topRightTentacle;
	private ModelRenderer topLeftTentacle;
	private ModelRenderer bottomRightTentacle;
	private ModelRenderer bottomLeftTentacle;
	private ModelRenderer topTentacle;
	private ModelRenderer rightTentacle;
	private ModelRenderer bottomTentacle;
	private ModelRenderer leftTentacle;

	public ModelCorruptedPawn() {
		super();
		texWidth = 128;
		texHeight = 64;
		ImmutableList.Builder<ModelRenderer> builder = ImmutableList.builder();

		head = new ModelRenderer(this, 0, 0);
		head.addBox(-4F, -8F, -4F, 16, 16, 16);
		head.setPos(-4F, 0F, -2F);
		head.setTexSize(128, 64);
		head.mirror = true;
		setRotation(head, 0F, 0F, 0F);
		builder.add(head);

		topRightTentacle = new ModelRenderer(this, 32, 41);
		topRightTentacle.addBox(-2F, 0F, -2F, 4, 12, 4);
		topRightTentacle.setPos(-9F, -9F, 2F);
		topRightTentacle.setTexSize(128, 64);
		topRightTentacle.mirror = true;
		setRotation(topRightTentacle, 0F, 0F, 2.324799F);
		builder.add(topRightTentacle);

		topLeftTentacle = new ModelRenderer(this, 32, 41);
		topLeftTentacle.addBox(-2F, 0F, -2F, 4, 12, 4);
		topLeftTentacle.setPos(9F, -9F, 2F);
		topLeftTentacle.setTexSize(128, 64);
		topLeftTentacle.mirror = true;
		setRotation(topLeftTentacle, 0F, 0F, -2.324796F);
		builder.add(topLeftTentacle);

		bottomRightTentacle = new ModelRenderer(this, 32, 41);
		bottomRightTentacle.addBox(-2F, 0F, -2F, 4, 12, 4);
		bottomRightTentacle.setPos(-9F, 9F, 2F);
		bottomRightTentacle.setTexSize(128, 64);
		bottomRightTentacle.mirror = true;
		setRotation(bottomRightTentacle, 0F, 0F, 0.7435722F);
		builder.add(bottomRightTentacle);

		bottomLeftTentacle = new ModelRenderer(this, 32, 41);
		bottomLeftTentacle.addBox(-2F, 0F, -2F, 4, 12, 4);
		bottomLeftTentacle.setPos(9F, 9F, 2F);
		bottomLeftTentacle.setTexSize(128, 64);
		bottomLeftTentacle.mirror = true;
		setRotation(bottomLeftTentacle, 0F, 0F, -0.7435801F);
		builder.add(bottomLeftTentacle);

		topTentacle = new ModelRenderer(this, 32, 41);
		topTentacle.addBox(-2F, 0F, -2F, 4, 12, 4);
		topTentacle.setPos(0F, -9F, 2F);
		topTentacle.setTexSize(128, 64);
		topTentacle.mirror = true;
		setRotation(topTentacle, 0F, 0F, 3.141593F);
		builder.add(topTentacle);

		rightTentacle = new ModelRenderer(this, 32, 41);
		rightTentacle.addBox(-2F, 0F, -2F, 4, 12, 4);
		rightTentacle.setPos(-9F, 0F, 2F);
		rightTentacle.setTexSize(128, 64);
		rightTentacle.mirror = true;
		setRotation(rightTentacle, 0F, 0F, 1.570796F);
		builder.add(rightTentacle);

		bottomTentacle = new ModelRenderer(this, 32, 41);
		bottomTentacle.addBox(-2F, 0F, -2F, 4, 12, 4);
		bottomTentacle.setPos(0F, 9F, 2F);
		bottomTentacle.setTexSize(128, 64);
		bottomTentacle.mirror = true;
		setRotation(bottomTentacle, 0F, 0F, 0F);
		builder.add(bottomTentacle);

		leftTentacle = new ModelRenderer(this, 32, 41);
		leftTentacle.addBox(-2F, 0F, -2F, 4, 12, 4);
		leftTentacle.setPos(9F, 0F, 2F);
		leftTentacle.setTexSize(128, 64);
		leftTentacle.mirror = true;
		setRotation(leftTentacle, 0F, 0F, -1.570796F);
		builder.add(leftTentacle);

		this.parts = builder.build();
	}

	private void setRotation(ModelRenderer model, float x, float y, float z) {
		model.xRot = x;
		model.yRot = y;
		model.zRot = z;
	}

	@Override
	public void setupAnim(T entityIn, float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch) {
		this.head.xRot = headPitch / (180F / (float) Math.PI);
		this.head.yRot = netHeadYaw / (180F / (float) Math.PI);

		float swing = limbSwingAmount * 4F;
		float swingCorner = swing * 0.45F + MathHelper.sin(limbSwing) * 0.25F;
		float swingCardinal = swing * 0.95F + MathHelper.cos(limbSwing) * 0.25F;

		this.topRightTentacle.xRot = swingCorner;
		this.topLeftTentacle.xRot = swingCorner;
		this.bottomRightTentacle.xRot = swingCorner;
		this.bottomLeftTentacle.xRot = swingCorner;
		this.topTentacle.xRot = swingCardinal;
		this.leftTentacle.xRot = swingCardinal;
		this.rightTentacle.xRot = swingCardinal;
		this.bottomTentacle.xRot = swingCardinal;
	}

	@Override
	public Iterable<ModelRenderer> parts() {
		return parts;
	}
}
